/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author kyleq
 */

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JCheckBox;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

public class StaffRooms extends javax.swing.JFrame {

    private String databaseUrl = "jdbc:mysql://localhost:3306/hotel?zeroDateTimeBehavior=CONVERT_TO_NULL";
    private String username = "root";
    private String password = "wassim123";
    private HotelDatabaseManager hotelDBM = new HotelDatabaseManager(databaseUrl, username, password);
    
    private Staff staff = null;
    private User user = null;
    
    public StaffRooms(Staff staff, User user){
        this.staff=staff;
        this.user=user;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        navPanel2 = new javax.swing.JPanel();
        hotelLabelImg = new javax.swing.JLabel();
        roomsButton = new javax.swing.JButton();
        servicesButton = new javax.swing.JButton();
        feedbackButon = new javax.swing.JButton();
        logOutButton = new javax.swing.JButton();
        staffNameLabel = new javax.swing.JLabel();
        bookingsButton = new javax.swing.JButton();
        checkInsButtons = new javax.swing.JButton();
        billsButton = new javax.swing.JButton();
        headerPanel = new javax.swing.JPanel();
        roomHeaderLabel = new javax.swing.JLabel();
        roomsLowerPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        roomsTable = new javax.swing.JTable();
        availableCheckBox = new javax.swing.JCheckBox();
        typeComboBox = new javax.swing.JComboBox<>();
        filtersLabel = new javax.swing.JLabel();
        roomTypeLabel = new javax.swing.JLabel();
        setAvailableButton = new javax.swing.JButton();
        notifLabel = new javax.swing.JLabel();
        setUnavailableButton = new javax.swing.JButton();
        setUnderMaintenanceButton = new javax.swing.JButton();
        unavailableCheckBox = new javax.swing.JCheckBox();
        underMaintenanceCheckBox = new javax.swing.JCheckBox();
        occupiedCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("User Home");
        setResizable(false);

        navPanel2.setBackground(new java.awt.Color(196, 167, 111));
        navPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        hotelLabelImg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/hotel-label.png"))); // NOI18N

        roomsButton.setBackground(new java.awt.Color(88, 73, 16));
        roomsButton.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        roomsButton.setForeground(new java.awt.Color(255, 255, 255));
        roomsButton.setText("Chambres");
        roomsButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        roomsButton.setBorderPainted(false);
        roomsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomsButtonActionPerformed(evt);
            }
        });

        servicesButton.setBackground(new java.awt.Color(88, 73, 16));
        servicesButton.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        servicesButton.setForeground(new java.awt.Color(255, 255, 255));
        servicesButton.setText("Services");
        servicesButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        servicesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                servicesButtonActionPerformed(evt);
            }
        });

        feedbackButon.setBackground(new java.awt.Color(88, 73, 16));
        feedbackButon.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        feedbackButon.setForeground(new java.awt.Color(255, 255, 255));
        feedbackButon.setText("Feedbacks");
        feedbackButon.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        feedbackButon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                feedbackButonActionPerformed(evt);
            }
        });

        logOutButton.setBackground(new java.awt.Color(88, 73, 16));
        logOutButton.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        logOutButton.setForeground(new java.awt.Color(255, 255, 255));
        logOutButton.setText("Se déconnecter");
        logOutButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        logOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logOutButtonActionPerformed(evt);
            }
        });

        staffNameLabel.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        staffNameLabel.setForeground(new java.awt.Color(88, 73, 16));
        staffNameLabel.setText("staffName");
        staffNameLabel.setToolTipText("");

        bookingsButton.setBackground(new java.awt.Color(88, 73, 16));
        bookingsButton.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        bookingsButton.setForeground(new java.awt.Color(255, 255, 255));
        bookingsButton.setText("Réservations");
        bookingsButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        bookingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookingsButtonActionPerformed(evt);
            }
        });

        checkInsButtons.setBackground(new java.awt.Color(88, 73, 16));
        checkInsButtons.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        checkInsButtons.setForeground(new java.awt.Color(255, 255, 255));
        checkInsButtons.setText("Enregistrements");
        checkInsButtons.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        checkInsButtons.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkInsButtonsActionPerformed(evt);
            }
        });

        billsButton.setBackground(new java.awt.Color(88, 73, 16));
        billsButton.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        billsButton.setForeground(new java.awt.Color(255, 255, 255));
        billsButton.setText("Factures");
        billsButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        billsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                billsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout navPanel2Layout = new javax.swing.GroupLayout(navPanel2);
        navPanel2.setLayout(navPanel2Layout);
        navPanel2Layout.setHorizontalGroup(
            navPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, navPanel2Layout.createSequentialGroup()
                .addContainerGap(34, Short.MAX_VALUE)
                .addGroup(navPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(billsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(staffNameLabel, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(roomsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(hotelLabelImg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(servicesButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(feedbackButon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(logOutButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bookingsButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(checkInsButtons, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18))
        );
        navPanel2Layout.setVerticalGroup(
            navPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(navPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(hotelLabelImg)
                .addGap(18, 18, 18)
                .addComponent(staffNameLabel)
                .addGap(18, 18, 18)
                .addComponent(roomsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bookingsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkInsButtons, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(servicesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(billsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(feedbackButon, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(logOutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );

        staffNameLabel.setText("Bonjour, " + staff.getFirstName());

        headerPanel.setBackground(new java.awt.Color(216, 196, 156));
        headerPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        roomHeaderLabel.setFont(new java.awt.Font("Times New Roman", 0, 48)); // NOI18N
        roomHeaderLabel.setForeground(new java.awt.Color(88, 73, 16));
        roomHeaderLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        roomHeaderLabel.setText("Chambres");

        javax.swing.GroupLayout headerPanelLayout = new javax.swing.GroupLayout(headerPanel);
        headerPanel.setLayout(headerPanelLayout);
        headerPanelLayout.setHorizontalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, headerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(roomHeaderLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        headerPanelLayout.setVerticalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, headerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(roomHeaderLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                .addContainerGap())
        );

        roomsLowerPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        roomsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre chambre", "Nom Hotel ", "Capacité", "Cout", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        roomsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        roomsTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(roomsTable);
        try (Connection connection = hotelDBM.getDatabaseConnection();
            PreparedStatement preparedStatement = connection.prepareStatement("SELECT * FROM room")) {

            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                String room_number = String.valueOf(resultSet.getInt("room_number"));
                String room_type = resultSet.getString("room_type");
                String room_capacity = String.valueOf(resultSet.getInt("room_capacity"));
                String rate = String.valueOf(resultSet.getDouble("rate"))+"0";
                String status = resultSet.getString("status");

                rate = rate;

                String roomsTableData[] = {room_number, room_type, room_capacity, rate, status};
                DefaultTableModel roomTableModel = (DefaultTableModel) roomsTable.getModel();

                roomTableModel.addRow(roomsTableData);
            }

            preparedStatement.close();
        }
        catch (SQLException e) {
            e.printStackTrace();
        }

        availableCheckBox.setText("Disponible");
        availableCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                availableCheckBoxtypeComboBoxActionPerformed(evt);
            }
        });

        typeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All" }));
        typeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeComboBoxActionPerformed(evt);
            }
        });

        filtersLabel.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        filtersLabel.setText("Filtres:");

        roomTypeLabel.setText("Hotel:");

        setAvailableButton.setText("Mettre diponisble");
        setAvailableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setAvailableButtonActionPerformed(evt);
            }
        });

        notifLabel.setForeground(new java.awt.Color(255, 102, 102));
        notifLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        setUnavailableButton.setText("Mettre indisponible");
        setUnavailableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setUnavailableButtonActionPerformed(evt);
            }
        });

        setUnderMaintenanceButton.setText("Mettre sous Maintenance");
        setUnderMaintenanceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setUnderMaintenanceButtonActionPerformed(evt);
            }
        });

        unavailableCheckBox.setText("indisponible");
        unavailableCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unavailableCheckBoxtypeComboBoxActionPerformed(evt);
            }
        });

        underMaintenanceCheckBox.setText("Sous Maintenance");
        underMaintenanceCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                underMaintenanceCheckBoxtypeComboBoxActionPerformed(evt);
            }
        });

        occupiedCheckBox.setText("Occupée");
        occupiedCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                occupiedCheckBoxtypeComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout roomsLowerPanelLayout = new javax.swing.GroupLayout(roomsLowerPanel);
        roomsLowerPanel.setLayout(roomsLowerPanelLayout);
        roomsLowerPanelLayout.setHorizontalGroup(
            roomsLowerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roomsLowerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(roomsLowerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(setUnderMaintenanceButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(notifLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(roomsLowerPanelLayout.createSequentialGroup()
                        .addComponent(setAvailableButton, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(setUnavailableButton, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(roomsLowerPanelLayout.createSequentialGroup()
                        .addGroup(roomsLowerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(filtersLabel)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, roomsLowerPanelLayout.createSequentialGroup()
                                .addComponent(roomTypeLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(typeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(availableCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(unavailableCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(underMaintenanceCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(occupiedCheckBox)))
                .addContainerGap())
        );
        roomsLowerPanelLayout.setVerticalGroup(
            roomsLowerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roomsLowerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(filtersLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(roomsLowerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(roomTypeLabel)
                    .addComponent(typeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(availableCheckBox)
                    .addComponent(unavailableCheckBox)
                    .addComponent(underMaintenanceCheckBox)
                    .addComponent(occupiedCheckBox))
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(notifLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(setUnderMaintenanceButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(1, 1, 1)
                .addGroup(roomsLowerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(setUnavailableButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(setAvailableButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(navPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(headerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(roomsLowerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(navPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(headerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(roomsLowerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void availableCheckBoxtypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_availableCheckBoxtypeComboBoxActionPerformed
        List<RowFilter<Object, Object>> filters = new ArrayList<>();

        String selectedRoomType = (String) typeComboBox.getSelectedItem();
        if (selectedRoomType != null && !selectedRoomType.equals("All")) {
            filters.add(RowFilter.regexFilter(selectedRoomType, 1));
        }

        List<String> selectedStatus = new ArrayList<>();
        JCheckBox[] checkboxes = {availableCheckBox, unavailableCheckBox, underMaintenanceCheckBox, occupiedCheckBox};
        for (JCheckBox checkBox : checkboxes) {
            if (checkBox.isSelected()) {
                selectedStatus.add(checkBox.getText());
            }
        }

        if (!selectedStatus.isEmpty()) {
            RowFilter<Object, Object> statusFilter = RowFilter.regexFilter(String.join("|", selectedStatus), 4);
            filters.add(statusFilter);
        }

        // Additional filter for room type
        if (selectedRoomType != null && !selectedRoomType.equals("All")) {
            RowFilter<Object, Object> roomTypeFilter = RowFilter.regexFilter(selectedRoomType, 1);
            filters.add(roomTypeFilter);
        }

        RowFilter<Object, Object> compoundFilter = RowFilter.andFilter(filters);

        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>((DefaultTableModel) roomsTable.getModel());
        sorter.setRowFilter(compoundFilter);

        roomsTable.setRowSorter(sorter);
    }//GEN-LAST:event_availableCheckBoxtypeComboBoxActionPerformed

    private void typeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeComboBoxActionPerformed
        List<RowFilter<Object, Object>> filters = new ArrayList<>();

        String selectedRoomType = (String) typeComboBox.getSelectedItem();
        if (selectedRoomType != null && !selectedRoomType.equals("All")) {
            filters.add(RowFilter.regexFilter(selectedRoomType, 1));
        }

        List<String> selectedStatus = new ArrayList<>();
        JCheckBox[] checkboxes = {availableCheckBox, unavailableCheckBox, underMaintenanceCheckBox, occupiedCheckBox};
        for (JCheckBox checkBox : checkboxes) {
            if (checkBox.isSelected()) {
                selectedStatus.add(checkBox.getText());
            }
        }

        if (!selectedStatus.isEmpty()) {
            RowFilter<Object, Object> statusFilter = RowFilter.regexFilter(String.join("|", selectedStatus), 4);
            filters.add(statusFilter);
        }

        // Additional filter for room type
        if (selectedRoomType != null && !selectedRoomType.equals("All")) {
            RowFilter<Object, Object> roomTypeFilter = RowFilter.regexFilter(selectedRoomType, 1);
            filters.add(roomTypeFilter);
        }

        RowFilter<Object, Object> compoundFilter = RowFilter.andFilter(filters);

        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>((DefaultTableModel) roomsTable.getModel());
        sorter.setRowFilter(compoundFilter);

        roomsTable.setRowSorter(sorter);
    }//GEN-LAST:event_typeComboBoxActionPerformed

    private void setAvailableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setAvailableButtonActionPerformed
        int selectedRowIndex = roomsTable.getSelectedRow();
        
        String status = "Available";

        if (selectedRowIndex != -1) {
            if("Occupied".equals(roomsTable.getValueAt(selectedRowIndex, 4).toString())){
                notifLabel.setText("Room is still currently occupied!");
            }
            else{
                if("Available".equals(roomsTable.getValueAt(selectedRowIndex, 4).toString())){
                    notifLabel.setText("Room is already available!");
                }
                else{
                    String roomNumber = roomsTable.getValueAt(selectedRowIndex, 0).toString();

                    hotelDBM.updateRoomStatus(Integer.parseInt(roomNumber), status);

                    this.dispose();

                    StaffRooms staffRoom = new StaffRooms(staff, user);
                    staffRoom.setVisible(true);
                }
            }   
        }
        else {
            notifLabel.setText("Please select a room.");
        }
    }//GEN-LAST:event_setAvailableButtonActionPerformed

    private void setUnavailableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setUnavailableButtonActionPerformed
        int selectedRowIndex = roomsTable.getSelectedRow();
        
        String status = "Unavailable";

        if (selectedRowIndex != -1) {
            if("Occupied".equals(roomsTable.getValueAt(selectedRowIndex, 4).toString())){
                notifLabel.setText("Room is still currently occupied!");
            }
            else{
                if("Unavailable".equals(roomsTable.getValueAt(selectedRowIndex, 4).toString())){
                    notifLabel.setText("Room is already unavailable!");
                }
                else{
                    String roomNumber = roomsTable.getValueAt(selectedRowIndex, 0).toString();

                    hotelDBM.updateRoomStatus(Integer.parseInt(roomNumber), status);

                    this.dispose();

                    StaffRooms staffRoom = new StaffRooms(staff, user);
                    staffRoom.setVisible(true);
                }
            }   
        }
        else {
            notifLabel.setText("Please select a room.");
        }
    }//GEN-LAST:event_setUnavailableButtonActionPerformed

    private void setUnderMaintenanceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setUnderMaintenanceButtonActionPerformed
        int selectedRowIndex = roomsTable.getSelectedRow();
        
        String status = "Under Maintenance";

        if (selectedRowIndex != -1) {
            if("Occupied".equals(roomsTable.getValueAt(selectedRowIndex, 4).toString())){
                notifLabel.setText("Room is still currently occupied!");
            }
            else{
                if("Under Maintenance".equals(roomsTable.getValueAt(selectedRowIndex, 4).toString())){
                    notifLabel.setText("Room is already under maintenance!");
                }
                else{
                    String roomNumber = roomsTable.getValueAt(selectedRowIndex, 0).toString();

                    hotelDBM.updateRoomStatus(Integer.parseInt(roomNumber), status);

                    this.dispose();

                    StaffRooms staffRoom = new StaffRooms(staff, user);
                    staffRoom.setVisible(true);
                }
            }   
        }
        else {
            notifLabel.setText("Please select a room.");
        }
    }//GEN-LAST:event_setUnderMaintenanceButtonActionPerformed

    private void unavailableCheckBoxtypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unavailableCheckBoxtypeComboBoxActionPerformed
        List<RowFilter<Object, Object>> filters = new ArrayList<>();

        String selectedRoomType = (String) typeComboBox.getSelectedItem();
        if (selectedRoomType != null && !selectedRoomType.equals("All")) {
            filters.add(RowFilter.regexFilter(selectedRoomType, 1));
        }

        List<String> selectedStatus = new ArrayList<>();
        JCheckBox[] checkboxes = {availableCheckBox, unavailableCheckBox, underMaintenanceCheckBox, occupiedCheckBox};
        for (JCheckBox checkBox : checkboxes) {
            if (checkBox.isSelected()) {
                selectedStatus.add(checkBox.getText());
            }
        }

        if (!selectedStatus.isEmpty()) {
            RowFilter<Object, Object> statusFilter = RowFilter.regexFilter(String.join("|", selectedStatus), 4);
            filters.add(statusFilter);
        }

        // Additional filter for room type
        if (selectedRoomType != null && !selectedRoomType.equals("All")) {
            RowFilter<Object, Object> roomTypeFilter = RowFilter.regexFilter(selectedRoomType, 1);
            filters.add(roomTypeFilter);
        }

        RowFilter<Object, Object> compoundFilter = RowFilter.andFilter(filters);

        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>((DefaultTableModel) roomsTable.getModel());
        sorter.setRowFilter(compoundFilter);

        roomsTable.setRowSorter(sorter);
    }//GEN-LAST:event_unavailableCheckBoxtypeComboBoxActionPerformed

    private void underMaintenanceCheckBoxtypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_underMaintenanceCheckBoxtypeComboBoxActionPerformed
        List<RowFilter<Object, Object>> filters = new ArrayList<>();

        String selectedRoomType = (String) typeComboBox.getSelectedItem();
        if (selectedRoomType != null && !selectedRoomType.equals("All")) {
            filters.add(RowFilter.regexFilter(selectedRoomType, 1));
        }

        List<String> selectedStatus = new ArrayList<>();
        JCheckBox[] checkboxes = {availableCheckBox, unavailableCheckBox, underMaintenanceCheckBox, occupiedCheckBox};
        for (JCheckBox checkBox : checkboxes) {
            if (checkBox.isSelected()) {
                selectedStatus.add(checkBox.getText());
            }
        }

        if (!selectedStatus.isEmpty()) {
            RowFilter<Object, Object> statusFilter = RowFilter.regexFilter(String.join("|", selectedStatus), 4);
            filters.add(statusFilter);
        }

        // Additional filter for room type
        if (selectedRoomType != null && !selectedRoomType.equals("All")) {
            RowFilter<Object, Object> roomTypeFilter = RowFilter.regexFilter(selectedRoomType, 1);
            filters.add(roomTypeFilter);
        }

        RowFilter<Object, Object> compoundFilter = RowFilter.andFilter(filters);

        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>((DefaultTableModel) roomsTable.getModel());
        sorter.setRowFilter(compoundFilter);

        roomsTable.setRowSorter(sorter);
    }//GEN-LAST:event_underMaintenanceCheckBoxtypeComboBoxActionPerformed

    private void occupiedCheckBoxtypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_occupiedCheckBoxtypeComboBoxActionPerformed
        List<RowFilter<Object, Object>> filters = new ArrayList<>();

        String selectedRoomType = (String) typeComboBox.getSelectedItem();
        if (selectedRoomType != null && !selectedRoomType.equals("All")) {
            filters.add(RowFilter.regexFilter(selectedRoomType, 1));
        }

        List<String> selectedStatus = new ArrayList<>();
        JCheckBox[] checkboxes = {availableCheckBox, unavailableCheckBox, underMaintenanceCheckBox, occupiedCheckBox};
        for (JCheckBox checkBox : checkboxes) {
            if (checkBox.isSelected()) {
                selectedStatus.add(checkBox.getText());
            }
        }

        if (!selectedStatus.isEmpty()) {
            RowFilter<Object, Object> statusFilter = RowFilter.regexFilter(String.join("|", selectedStatus), 4);
            filters.add(statusFilter);
        }

        // Additional filter for room type
        if (selectedRoomType != null && !selectedRoomType.equals("All")) {
            RowFilter<Object, Object> roomTypeFilter = RowFilter.regexFilter(selectedRoomType, 1);
            filters.add(roomTypeFilter);
        }

        RowFilter<Object, Object> compoundFilter = RowFilter.andFilter(filters);

        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>((DefaultTableModel) roomsTable.getModel());
        sorter.setRowFilter(compoundFilter);

        roomsTable.setRowSorter(sorter);
    }//GEN-LAST:event_occupiedCheckBoxtypeComboBoxActionPerformed

    private void logOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logOutButtonActionPerformed
        Login login = new Login();
        login.setVisible(true);
        dispose();
    }//GEN-LAST:event_logOutButtonActionPerformed

    private void feedbackButonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_feedbackButonActionPerformed
        StaffFeedback staffFeedback = new StaffFeedback(staff, user);
        staffFeedback.setVisible(true);
        dispose();
    }//GEN-LAST:event_feedbackButonActionPerformed

    private void servicesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_servicesButtonActionPerformed
        StaffServices staffServices = new StaffServices(staff, user);
        staffServices.setVisible(true);
        dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_servicesButtonActionPerformed

    private void roomsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomsButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roomsButtonActionPerformed

    private void bookingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookingsButtonActionPerformed
        StaffBookings staffBookings = new StaffBookings(staff, user);
        staffBookings.setVisible(true);
        dispose();
    }//GEN-LAST:event_bookingsButtonActionPerformed

    private void checkInsButtonsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkInsButtonsActionPerformed
        StaffCheckIns staffCheckIns = new StaffCheckIns(staff, user);
        staffCheckIns.setVisible(true);
        dispose();
    }//GEN-LAST:event_checkInsButtonsActionPerformed

    private void billsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_billsButtonActionPerformed
        StaffBills staffBills = new StaffBills(staff, user);
        staffBills.setVisible(true);
        dispose();
    }//GEN-LAST:event_billsButtonActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox availableCheckBox;
    private javax.swing.JButton billsButton;
    private javax.swing.JButton bookingsButton;
    private javax.swing.JButton checkInsButtons;
    private javax.swing.JButton feedbackButon;
    private javax.swing.JLabel filtersLabel;
    private javax.swing.JPanel headerPanel;
    private javax.swing.JLabel hotelLabelImg;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton logOutButton;
    private javax.swing.JPanel navPanel2;
    private javax.swing.JLabel notifLabel;
    private javax.swing.JCheckBox occupiedCheckBox;
    private javax.swing.JLabel roomHeaderLabel;
    private javax.swing.JLabel roomTypeLabel;
    private javax.swing.JButton roomsButton;
    private javax.swing.JPanel roomsLowerPanel;
    private javax.swing.JTable roomsTable;
    private javax.swing.JButton servicesButton;
    private javax.swing.JButton setAvailableButton;
    private javax.swing.JButton setUnavailableButton;
    private javax.swing.JButton setUnderMaintenanceButton;
    private javax.swing.JLabel staffNameLabel;
    private javax.swing.JComboBox<String> typeComboBox;
    private javax.swing.JCheckBox unavailableCheckBox;
    private javax.swing.JCheckBox underMaintenanceCheckBox;
    // End of variables declaration//GEN-END:variables
}
