
import javax.swing.AbstractButton;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author kyleq
 */

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JCheckBox;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

public class StaffFeedback extends javax.swing.JFrame {

    private String databaseUrl = "jdbc:mysql://localhost:3306/hotel?zeroDateTimeBehavior=CONVERT_TO_NULL";
    private String username = "root";
    private String password = "wassim123";
    private HotelDatabaseManager hotelDBM = new HotelDatabaseManager(databaseUrl, username, password);
    
    private Staff staff = null;
    private User user = null;
    
    public StaffFeedback(Staff staff, User user){
        this.staff=staff;
        this.user=user;
        initComponents();
        loadRatingsAnalysis();
    }

    private void loadRatingsAnalysis() {
        DefaultTableModel model = (DefaultTableModel) feedbacksTable.getModel();
        int rowCount = feedbacksTable.getRowCount();

        int terribleCount = 0;
        int poorCount = 0;
        int fairCount = 0;
        int goodCount = 0;
        int awesomeCount = 0;

        for (int row = 0; row < model.getRowCount(); row++) {
            String rating = (String) model.getValueAt(row, 2); // Assuming the rating column is at index 2

            switch (rating) {
                case "Terrible" -> terribleCount++;
                case "Pauvre" -> poorCount++;
                case "Normal" -> fairCount++;
                case "Bien" -> goodCount++;
                case "TrÃ©s bien" -> awesomeCount++;
            }
        }

        terribleProgressBar.setValue(terribleCount);
        poorProgressBar.setValue(poorCount);
        fairProgressBar.setValue(fairCount);
        goodProgressBar.setValue(goodCount);
        awesomeProgressBar.setValue(awesomeCount);
        
        terribleProgressBar.setMaximum(rowCount);
        poorProgressBar.setMaximum(rowCount);
        fairProgressBar.setMaximum(rowCount);
        goodProgressBar.setMaximum(rowCount);
        awesomeProgressBar.setMaximum(rowCount);
        
        terribleProgressBar.setString(String.valueOf(terribleCount));
        poorProgressBar.setString(String.valueOf(poorCount));
        fairProgressBar.setString(String.valueOf(fairCount));
        goodProgressBar.setString(String.valueOf(goodCount));
        awesomeProgressBar.setString(String.valueOf(awesomeCount));
    }  
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ratingButtonGroup = new javax.swing.ButtonGroup();
        navPanel = new javax.swing.JPanel();
        hotelLabelImg = new javax.swing.JLabel();
        roomsButton = new javax.swing.JButton();
        servicesButton = new javax.swing.JButton();
        feedbackButon = new javax.swing.JButton();
        logOutButton = new javax.swing.JButton();
        staffName = new javax.swing.JLabel();
        bookingsButton = new javax.swing.JButton();
        checkInsButtons = new javax.swing.JButton();
        billsButton = new javax.swing.JButton();
        headerPanel = new javax.swing.JPanel();
        feedbackHeader = new javax.swing.JLabel();
        lowerPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        feedbacksTable = new javax.swing.JTable();
        goodCheckBox = new javax.swing.JCheckBox();
        terribleCheckBox = new javax.swing.JCheckBox();
        poorCheckBox = new javax.swing.JCheckBox();
        fairCheckBox = new javax.swing.JCheckBox();
        awesomeCheckBox = new javax.swing.JCheckBox();
        feedbacksCounterLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        terribleProgressBar = new javax.swing.JProgressBar();
        poorProgressBar = new javax.swing.JProgressBar();
        fairProgressBar = new javax.swing.JProgressBar();
        goodProgressBar = new javax.swing.JProgressBar();
        awesomeProgressBar = new javax.swing.JProgressBar();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("User Home");
        setResizable(false);

        navPanel.setBackground(new java.awt.Color(196, 167, 111));
        navPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        hotelLabelImg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/hotel-label.png"))); // NOI18N

        roomsButton.setBackground(new java.awt.Color(88, 73, 16));
        roomsButton.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        roomsButton.setForeground(new java.awt.Color(255, 255, 255));
        roomsButton.setText("Rooms");
        roomsButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        roomsButton.setBorderPainted(false);
        roomsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomsButtonActionPerformed(evt);
            }
        });

        servicesButton.setBackground(new java.awt.Color(88, 73, 16));
        servicesButton.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        servicesButton.setForeground(new java.awt.Color(255, 255, 255));
        servicesButton.setText("Services");
        servicesButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        servicesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                servicesButtonActionPerformed(evt);
            }
        });

        feedbackButon.setBackground(new java.awt.Color(88, 73, 16));
        feedbackButon.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        feedbackButon.setForeground(new java.awt.Color(255, 255, 255));
        feedbackButon.setText("Feedbacks");
        feedbackButon.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        feedbackButon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                feedbackButonActionPerformed(evt);
            }
        });

        logOutButton.setBackground(new java.awt.Color(88, 73, 16));
        logOutButton.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        logOutButton.setForeground(new java.awt.Color(255, 255, 255));
        logOutButton.setText("Logout");
        logOutButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        logOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logOutButtonActionPerformed(evt);
            }
        });

        staffName.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        staffName.setForeground(new java.awt.Color(88, 73, 16));
        staffName.setText("staffName");
        staffName.setToolTipText("");

        bookingsButton.setBackground(new java.awt.Color(88, 73, 16));
        bookingsButton.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        bookingsButton.setForeground(new java.awt.Color(255, 255, 255));
        bookingsButton.setText("Bookings");
        bookingsButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        bookingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookingsButtonActionPerformed(evt);
            }
        });

        checkInsButtons.setBackground(new java.awt.Color(88, 73, 16));
        checkInsButtons.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        checkInsButtons.setForeground(new java.awt.Color(255, 255, 255));
        checkInsButtons.setText("Check Ins");
        checkInsButtons.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        checkInsButtons.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkInsButtonsActionPerformed(evt);
            }
        });

        billsButton.setBackground(new java.awt.Color(88, 73, 16));
        billsButton.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        billsButton.setForeground(new java.awt.Color(255, 255, 255));
        billsButton.setText("Bills");
        billsButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        billsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                billsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout navPanelLayout = new javax.swing.GroupLayout(navPanel);
        navPanel.setLayout(navPanelLayout);
        navPanelLayout.setHorizontalGroup(
            navPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, navPanelLayout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addGroup(navPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(billsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(navPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(staffName)
                        .addGroup(navPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(hotelLabelImg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(servicesButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(feedbackButon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(logOutButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bookingsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(checkInsButtons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(roomsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(18, 18, 18))
        );
        navPanelLayout.setVerticalGroup(
            navPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(navPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(hotelLabelImg)
                .addGap(18, 18, 18)
                .addComponent(staffName)
                .addGap(18, 18, 18)
                .addComponent(roomsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bookingsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkInsButtons, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(servicesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(billsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(feedbackButon, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(logOutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );

        staffName.setText("Bonjour, " + staff.getFirstName());

        headerPanel.setBackground(new java.awt.Color(216, 196, 156));
        headerPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        feedbackHeader.setFont(new java.awt.Font("Times New Roman", 0, 48)); // NOI18N
        feedbackHeader.setForeground(new java.awt.Color(88, 73, 16));
        feedbackHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        feedbackHeader.setText("FEEDBACKS");

        javax.swing.GroupLayout headerPanelLayout = new javax.swing.GroupLayout(headerPanel);
        headerPanel.setLayout(headerPanelLayout);
        headerPanelLayout.setHorizontalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, headerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(feedbackHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        headerPanelLayout.setVerticalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, headerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(feedbackHeader, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                .addContainerGap())
        );

        lowerPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        feedbacksTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Username", "Notation", "Feedback", "Date "
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        feedbacksTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        feedbacksTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(feedbacksTable);
        try (Connection connection = hotelDBM.getDatabaseConnection();
            PreparedStatement preparedStatement = connection.prepareStatement("SELECT feedback_id, user.username, rating, feedback, feedback_date FROM feedback JOIN guest ON feedback.guest_id = guest.guest_id JOIN user ON guest.user_id = user.user_id;")) {

            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                String feedback_id = String.valueOf(resultSet.getInt("feedback_id"));
                String username = resultSet.getString("username");
                String rating = resultSet.getString("rating");
                String feedback = resultSet.getString("feedback");
                Date feedback_date = resultSet.getDate("feedback_date");

                // Format feedback_date to "MMMM dd, yyyy"
                SimpleDateFormat dateFormat = new SimpleDateFormat("MMMM dd, yyyy");
                String formattedDate = dateFormat.format(feedback_date);

                String feedbacksTableData[] = {feedback_id, username, rating, feedback, formattedDate};
                DefaultTableModel feedbacksTableModel = (DefaultTableModel) feedbacksTable.getModel();

                feedbacksTableModel.addRow(feedbacksTableData);
            }

            preparedStatement.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }

        goodCheckBox.setText("Bien");
        goodCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goodCheckBoxtypeComboBoxActionPerformed(evt);
            }
        });

        terribleCheckBox.setText("Terrible");
        terribleCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                terribleCheckBoxtypeComboBoxActionPerformed(evt);
            }
        });

        poorCheckBox.setText("Pauvre");
        poorCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                poorCheckBoxtypeComboBoxActionPerformed(evt);
            }
        });

        fairCheckBox.setText("Normal");
        fairCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fairCheckBoxtypeComboBoxActionPerformed(evt);
            }
        });

        awesomeCheckBox.setText("TrÃ©s bien");
        awesomeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                awesomeCheckBoxtypeComboBoxActionPerformed(evt);
            }
        });

        feedbacksCounterLabel.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        feedbacksCounterLabel.setText("0 Feedbacks");

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/hotel-icon-corner.png"))); // NOI18N
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        terribleProgressBar.setString("0");
        terribleProgressBar.setStringPainted(true);

        poorProgressBar.setString("0");
        poorProgressBar.setStringPainted(true);

        fairProgressBar.setString("0");
        fairProgressBar.setStringPainted(true);

        goodProgressBar.setString("0");
        goodProgressBar.setStringPainted(true);

        awesomeProgressBar.setString("0");
        awesomeProgressBar.setStringPainted(true);

        jLabel2.setText("Terrible");

        jLabel3.setText("Pauvre");

        jLabel4.setText("Normal");

        jLabel5.setText("Bien");

        jLabel6.setText("TrÃ©s bien");

        javax.swing.GroupLayout lowerPanelLayout = new javax.swing.GroupLayout(lowerPanel);
        lowerPanel.setLayout(lowerPanelLayout);
        lowerPanelLayout.setHorizontalGroup(
            lowerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lowerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(lowerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, lowerPanelLayout.createSequentialGroup()
                        .addGroup(lowerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(15, 15, 15)
                        .addGroup(lowerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fairProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(goodProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(awesomeProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(poorProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(terribleProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(lowerPanelLayout.createSequentialGroup()
                        .addGroup(lowerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 705, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, lowerPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(terribleCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(poorCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fairCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(goodCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(awesomeCheckBox))
                            .addComponent(feedbacksCounterLabel))
                        .addContainerGap())))
        );
        lowerPanelLayout.setVerticalGroup(
            lowerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lowerPanelLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(lowerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(terribleCheckBox)
                    .addComponent(poorCheckBox)
                    .addComponent(fairCheckBox)
                    .addComponent(goodCheckBox)
                    .addComponent(awesomeCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(feedbacksCounterLabel)
                .addGroup(lowerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(lowerPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(lowerPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(lowerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(terribleProgressBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(lowerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(poorProgressBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(lowerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(lowerPanelLayout.createSequentialGroup()
                                .addGroup(lowerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(fairProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(goodProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(lowerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(awesomeProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(0, 43, Short.MAX_VALUE))))
        );

        int rowCount = feedbacksTable.getRowCount();

        feedbacksCounterLabel.setText(rowCount + " Feedbacks");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(navPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lowerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(headerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(navPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(headerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lowerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void logOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logOutButtonActionPerformed
        Login login = new Login();
        login.setVisible(true);
        dispose();
    }//GEN-LAST:event_logOutButtonActionPerformed

    private void feedbackButonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_feedbackButonActionPerformed

    }//GEN-LAST:event_feedbackButonActionPerformed

    private void servicesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_servicesButtonActionPerformed
        StaffServices staffServices = new StaffServices(staff, user);
        staffServices.setVisible(true);
        dispose();
    }//GEN-LAST:event_servicesButtonActionPerformed

    private void roomsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomsButtonActionPerformed
        StaffRooms staffRoom = new StaffRooms(staff, user);
        staffRoom.setVisible(true);
        dispose();
    }//GEN-LAST:event_roomsButtonActionPerformed

    private void awesomeCheckBoxtypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_awesomeCheckBoxtypeComboBoxActionPerformed
        List<RowFilter<Object, Object>> filters = new ArrayList<>();

        List<String> selectedStatus = new ArrayList<>();
        JCheckBox[] checkboxes = {terribleCheckBox, poorCheckBox, fairCheckBox, goodCheckBox, awesomeCheckBox};
        for (JCheckBox checkBox : checkboxes) {
            if (checkBox.isSelected()) {
                selectedStatus.add(checkBox.getText());
            }
        }

        if (!selectedStatus.isEmpty()) {
            RowFilter<Object, Object> statusFilter = RowFilter.regexFilter(String.join("|", selectedStatus), 2);
            filters.add(statusFilter);
        }

        RowFilter<Object, Object> compoundFilter = RowFilter.andFilter(filters);

        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>((DefaultTableModel) feedbacksTable.getModel());
        sorter.setRowFilter(compoundFilter);

        feedbacksTable.setRowSorter(sorter);
    }//GEN-LAST:event_awesomeCheckBoxtypeComboBoxActionPerformed

    private void fairCheckBoxtypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fairCheckBoxtypeComboBoxActionPerformed
        List<RowFilter<Object, Object>> filters = new ArrayList<>();

        List<String> selectedStatus = new ArrayList<>();
        JCheckBox[] checkboxes = {terribleCheckBox, poorCheckBox, fairCheckBox, goodCheckBox, awesomeCheckBox};
        for (JCheckBox checkBox : checkboxes) {
            if (checkBox.isSelected()) {
                selectedStatus.add(checkBox.getText());
            }
        }

        if (!selectedStatus.isEmpty()) {
            RowFilter<Object, Object> statusFilter = RowFilter.regexFilter(String.join("|", selectedStatus), 2);
            filters.add(statusFilter);
        }

        RowFilter<Object, Object> compoundFilter = RowFilter.andFilter(filters);

        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>((DefaultTableModel) feedbacksTable.getModel());
        sorter.setRowFilter(compoundFilter);

        feedbacksTable.setRowSorter(sorter);
    }//GEN-LAST:event_fairCheckBoxtypeComboBoxActionPerformed

    private void poorCheckBoxtypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_poorCheckBoxtypeComboBoxActionPerformed
        List<RowFilter<Object, Object>> filters = new ArrayList<>();

        List<String> selectedStatus = new ArrayList<>();
        JCheckBox[] checkboxes = {terribleCheckBox, poorCheckBox, fairCheckBox, goodCheckBox, awesomeCheckBox};
        for (JCheckBox checkBox : checkboxes) {
            if (checkBox.isSelected()) {
                selectedStatus.add(checkBox.getText());
            }
        }

        if (!selectedStatus.isEmpty()) {
            RowFilter<Object, Object> statusFilter = RowFilter.regexFilter(String.join("|", selectedStatus), 2);
            filters.add(statusFilter);
        }

        RowFilter<Object, Object> compoundFilter = RowFilter.andFilter(filters);

        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>((DefaultTableModel) feedbacksTable.getModel());
        sorter.setRowFilter(compoundFilter);

        feedbacksTable.setRowSorter(sorter);
    }//GEN-LAST:event_poorCheckBoxtypeComboBoxActionPerformed

    private void terribleCheckBoxtypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_terribleCheckBoxtypeComboBoxActionPerformed
        List<RowFilter<Object, Object>> filters = new ArrayList<>();

        List<String> selectedStatus = new ArrayList<>();
        JCheckBox[] checkboxes = {terribleCheckBox, poorCheckBox, fairCheckBox, goodCheckBox, awesomeCheckBox};
        for (JCheckBox checkBox : checkboxes) {
            if (checkBox.isSelected()) {
                selectedStatus.add(checkBox.getText());
            }
        }

        if (!selectedStatus.isEmpty()) {
            RowFilter<Object, Object> statusFilter = RowFilter.regexFilter(String.join("|", selectedStatus), 2);
            filters.add(statusFilter);
        }

        RowFilter<Object, Object> compoundFilter = RowFilter.andFilter(filters);

        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>((DefaultTableModel) feedbacksTable.getModel());
        sorter.setRowFilter(compoundFilter);

        feedbacksTable.setRowSorter(sorter);
    }//GEN-LAST:event_terribleCheckBoxtypeComboBoxActionPerformed

    private void goodCheckBoxtypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goodCheckBoxtypeComboBoxActionPerformed
        List<RowFilter<Object, Object>> filters = new ArrayList<>();

        List<String> selectedStatus = new ArrayList<>();
        JCheckBox[] checkboxes = {terribleCheckBox, poorCheckBox, fairCheckBox, goodCheckBox, awesomeCheckBox};
        for (JCheckBox checkBox : checkboxes) {
            if (checkBox.isSelected()) {
                selectedStatus.add(checkBox.getText());
            }
        }

        if (!selectedStatus.isEmpty()) {
            RowFilter<Object, Object> statusFilter = RowFilter.regexFilter(String.join("|", selectedStatus), 2);
            filters.add(statusFilter);
        }

        RowFilter<Object, Object> compoundFilter = RowFilter.andFilter(filters);

        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>((DefaultTableModel) feedbacksTable.getModel());
        sorter.setRowFilter(compoundFilter);

        feedbacksTable.setRowSorter(sorter);
    }//GEN-LAST:event_goodCheckBoxtypeComboBoxActionPerformed

    private void bookingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookingsButtonActionPerformed
        StaffBookings staffBookings = new StaffBookings(staff, user);
        staffBookings.setVisible(true);
        dispose();
    }//GEN-LAST:event_bookingsButtonActionPerformed

    private void checkInsButtonsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkInsButtonsActionPerformed
        StaffCheckIns staffCheckIns = new StaffCheckIns(staff, user);
        staffCheckIns.setVisible(true);
        dispose();
    }//GEN-LAST:event_checkInsButtonsActionPerformed

    private void billsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_billsButtonActionPerformed
        StaffBills staffBills = new StaffBills(staff, user);
        staffBills.setVisible(true);
        dispose();
    }//GEN-LAST:event_billsButtonActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox awesomeCheckBox;
    private javax.swing.JProgressBar awesomeProgressBar;
    private javax.swing.JButton billsButton;
    private javax.swing.JButton bookingsButton;
    private javax.swing.JButton checkInsButtons;
    private javax.swing.JCheckBox fairCheckBox;
    private javax.swing.JProgressBar fairProgressBar;
    private javax.swing.JButton feedbackButon;
    private javax.swing.JLabel feedbackHeader;
    private javax.swing.JLabel feedbacksCounterLabel;
    private javax.swing.JTable feedbacksTable;
    private javax.swing.JCheckBox goodCheckBox;
    private javax.swing.JProgressBar goodProgressBar;
    private javax.swing.JPanel headerPanel;
    private javax.swing.JLabel hotelLabelImg;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton logOutButton;
    private javax.swing.JPanel lowerPanel;
    private javax.swing.JPanel navPanel;
    private javax.swing.JCheckBox poorCheckBox;
    private javax.swing.JProgressBar poorProgressBar;
    private javax.swing.ButtonGroup ratingButtonGroup;
    private javax.swing.JButton roomsButton;
    private javax.swing.JButton servicesButton;
    private javax.swing.JLabel staffName;
    private javax.swing.JCheckBox terribleCheckBox;
    private javax.swing.JProgressBar terribleProgressBar;
    // End of variables declaration//GEN-END:variables
}
